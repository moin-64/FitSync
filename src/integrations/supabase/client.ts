

// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://vlvaytsqqlzfprphvgll.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZsdmF5dHNxcWx6ZnBycGh2Z2xsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM1NzMxNDYsImV4cCI6MjA1OTE0OTE0Nn0.q-ndRrgUZpvGVutBa-FDXEb8_IOnH0RRvKfXNTkvQB4";

// Enhanced Supabase client configuration with comprehensive error handling
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: typeof window !== 'undefined' ? window.localStorage : undefined,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    flowType: 'pkce'
  },
  global: {
    headers: {
      'X-Client-Info': 'lovable-fitness-app'
    },
    fetch: async (url: string, options: RequestInit = {}) => {
      console.log('üåê Supabase fetch attempt:', url);
      
      // Enhanced timeout and retry logic
      const controller = new AbortController();
      const timeoutId = setTimeout(() => {
        console.warn('üïê Request timeout for:', url);
        controller.abort();
      }, 15000); // Increased to 15 seconds
      
      const fetchWithRetry = async (retryCount = 0): Promise<Response> => {
        try {
          console.log(`üîÑ Attempt ${retryCount + 1} for ${url}`);
          
          const response = await fetch(url, {
            ...options,
            signal: controller.signal,
            headers: {
              'Content-Type': 'application/json',
              'Accept': 'application/json',
              'User-Agent': 'lovable-fitness-app',
              ...(options.headers || {}),
            },
            // Add explicit mode for CORS
            mode: 'cors',
            credentials: 'omit'
          });
          
          clearTimeout(timeoutId);
          
          console.log(`‚úÖ Response received for ${url}:`, {
            status: response.status,
            statusText: response.statusText,
            ok: response.ok
          });
          
          if (!response.ok && retryCount < 3) {
            console.warn(`‚ö†Ô∏è Non-OK response, retry ${retryCount + 1} for ${url}:`, response.status);
            await new Promise(resolve => setTimeout(resolve, Math.pow(2, retryCount) * 1000));
            return fetchWithRetry(retryCount + 1);
          }
          
          return response;
        } catch (error) {
          clearTimeout(timeoutId);
          
          console.error(`‚ùå Fetch error on attempt ${retryCount + 1} for ${url}:`, error);
          
          if (retryCount < 3 && error.name !== 'AbortError') {
            const delay = Math.pow(2, retryCount) * 1000;
            console.warn(`üîÑ Retrying in ${delay}ms for ${url}`);
            await new Promise(resolve => setTimeout(resolve, delay));
            return fetchWithRetry(retryCount + 1);
          }
          
          console.error('üí• All retries exhausted for:', url);
          throw error;
        }
      };
      
      return fetchWithRetry();
    }
  },
  realtime: {
    params: {
      eventsPerSecond: 1
    }
  }
});

// Enhanced connection health check with detailed diagnostics
export const checkSupabaseConnection = async (): Promise<boolean> => {
  try {
    console.log('üîç Starting Supabase connection check...');
    
    // Test basic connectivity first
    const startTime = Date.now();
    const { data, error } = await supabase
      .from('workouts')
      .select('count', { count: 'exact', head: true })
      .limit(1);
    
    const duration = Date.now() - startTime;
    
    if (error) {
      console.error('‚ùå Supabase connection check failed:', {
        error: error.message,
        details: error.details,
        hint: error.hint,
        code: error.code
      });
      return false;
    }
    
    console.log(`‚úÖ Supabase connection healthy (${duration}ms)`);
    return true;
  } catch (error) {
    console.error('üí• Supabase connection check error:', error);
    return false;
  }
};

// Network diagnostics helper
export const runNetworkDiagnostics = async () => {
  console.log('üîß Running network diagnostics...');
  
  try {
    // Test basic internet connectivity
    const response = await fetch('https://httpbin.org/get', { 
      method: 'GET',
      mode: 'cors' 
    });
    console.log('üåê Internet connectivity:', response.ok ? 'OK' : 'FAILED');
  } catch (error) {
    console.error('üåê Internet connectivity test failed:', error);
  }
  
  try {
    // Test Supabase endpoint reachability
    const response = await fetch(SUPABASE_URL, { 
      method: 'HEAD',
      mode: 'cors' 
    });
    console.log('üîó Supabase endpoint reachable:', response.ok ? 'OK' : 'FAILED');
  } catch (error) {
    console.error('üîó Supabase endpoint test failed:', error);
  }
};
