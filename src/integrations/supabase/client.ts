

// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://vlvaytsqqlzfprphvgll.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZsdmF5dHNxcWx6ZnBycGh2Z2xsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM1NzMxNDYsImV4cCI6MjA1OTE0OTE0Nn0.q-ndRrgUZpvGVutBa-FDXEb8_IOnH0RRvKfXNTkvQB4";

// Improved Supabase client configuration with better error handling and network resilience
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: typeof window !== 'undefined' ? window.localStorage : undefined,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    flowType: 'pkce'
  },
  global: {
    headers: {
      'X-Client-Info': 'lovable-fitness-app'
    },
    fetch: (url, options: RequestInit = {}) => {
      console.log('üåê Supabase fetch:', url);
      
      // Add timeout and retry logic
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 second timeout
      
      const fetchWithRetry = async (retryCount = 0): Promise<Response> => {
        try {
          const response = await fetch(url, {
            ...options,
            signal: controller.signal,
            headers: {
              ...(options.headers || {}),
              'Content-Type': 'application/json',
            }
          });
          
          clearTimeout(timeoutId);
          
          if (!response.ok && retryCount < 2) {
            console.warn(`üîÑ Retry ${retryCount + 1} for ${url}`);
            await new Promise(resolve => setTimeout(resolve, 1000 * (retryCount + 1)));
            return fetchWithRetry(retryCount + 1);
          }
          
          return response;
        } catch (error) {
          clearTimeout(timeoutId);
          
          if (retryCount < 2 && error.name !== 'AbortError') {
            console.warn(`üîÑ Retry ${retryCount + 1} for ${url} after error:`, error);
            await new Promise(resolve => setTimeout(resolve, 1000 * (retryCount + 1)));
            return fetchWithRetry(retryCount + 1);
          }
          
          console.error('‚ùå Supabase fetch failed:', error);
          throw error;
        }
      };
      
      return fetchWithRetry();
    }
  },
  realtime: {
    params: {
      eventsPerSecond: 2
    }
  }
});

// Add connection health check
export const checkSupabaseConnection = async (): Promise<boolean> => {
  try {
    const { data, error } = await supabase.from('workouts').select('count', { count: 'exact', head: true });
    if (error) {
      console.warn('‚ö†Ô∏è Supabase connection check failed:', error);
      return false;
    }
    console.log('‚úÖ Supabase connection healthy');
    return true;
  } catch (error) {
    console.error('‚ùå Supabase connection check error:', error);
    return false;
  }
};

